@---------------------------------------------------------------------------------
	#include "equates.h"
	#include "6502mac.h"
	#include "macro.h"
@---------------------------------------------------------------------------------	
	.global NSF_Run
	.global CPU_reset
	.global EMU_Run
	.global op_table
	.global default_scanlinehook
	.global pcm_scanlinehook
	.global rp2A03SetIRQPin
	.global CheckI
	.global PAL60
	.global cpustate
	.global ppustate
	.global rommap
	.global frametotal
	.global sleeptime
	.global mapperstate
	.global globals
	.global romstart
	.global __nes_chr_map
	.global __cartflags	
	.global __emuflags
	.global __hblankhook
	.global stepdebug
	.global __nz
	.global __a
	.global __x
	.global __y
	.global __p
	.global __pc
	.global __lastbank
	.global __sp
	.global __scanline
	.global __memmap_tbl
	.global __rombase
	.global debugstep
	.global __rendercount
	.global __barcode
	.global __barcode_out
	.global __af_state
	.global __af_start
	.global __prgsize16k
	.global all_pix_start
	.global all_pix_end
	.global debugwrite
	.global debugwrite_c
	.global nsfHeader

	.global __nsfPlay
	.global __nsfInit
	.global __nsfSongNo
	.global __nsfSongMode
		
pcmirqbakup = mapperData+24
pcmirqcount = mapperData+28
@---------------------------------------------------------------------------------
.section .itcm, "ax"
@---------------------------------------------------------------------------------
_xx:@	???					@invalid opcode
@---------------------------------------------------------------------------------
	DEBUGCOUNT BADOP
	bl debugstep
	fetch 2
@---------------------------------------------------------------------------------
_00:@   BRK
@---------------------------------------------------------------------------------
	DEBUGCOUNT BRK
	bl debugstep

	ldr_ r0,m6502LastBank
	sub r1,m6502pc,r0
	add r0,r1,#1
	push16			@save PC

	encodeP (B+R)		@save P

	ldr r12,=IRQ_VECTOR
	bl VecCont

	fetch 7
	.ltorg
@---------------------------------------------------------------------------------
_01:@   ORA ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opORA
	fetch 6
@---------------------------------------------------------------------------------
_05:@   ORA $nn
@---------------------------------------------------------------------------------
	doZ
	opORA
	fetch 3
@---------------------------------------------------------------------------------
_06:@   ASL $nn
@---------------------------------------------------------------------------------
	doZ
	opASL
	@fetch_c 5
	fetch 5
@---------------------------------------------------------------------------------
_08:@   PHP
@---------------------------------------------------------------------------------
	encodeP (B+R)
	push8 r0
	fetch 3
@---------------------------------------------------------------------------------
_09:@   ORA #$nn
@---------------------------------------------------------------------------------
	doIMM
	opORA
	fetch 2
@---------------------------------------------------------------------------------
_0A:@   ASL
@---------------------------------------------------------------------------------
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		@NZ
	orr cycles,cycles,#CYC_C		@Prepare C
	fetch_c 2						@also subs carry
@---------------------------------------------------------------------------------
_0D:@   ORA $nnnn
@---------------------------------------------------------------------------------
	doABS
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_0E:@   ASL $nnnn
@---------------------------------------------------------------------------------
	doABS
	opASL
	@fetch_c 6
	fetch 6
@---------------------------------------------------------------------------------
_10:@   BPL *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502pc],#1
	addeq m6502pc,m6502pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_11:@   ORA ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opORA
	fetch 5
@---------------------------------------------------------------------------------
_15:@   ORA $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_16:@   ASL $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opASL
	@fetch_c 6
	fetch 6
@---------------------------------------------------------------------------------
_18:@   CLC
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_C
	fetch 2
@---------------------------------------------------------------------------------
_19:@   ORA $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_1D:@   ORA $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opORA
	fetch 4
@---------------------------------------------------------------------------------
_1E:@   ASL $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opASL
	@fetch_c 7
	fetch 7
@---------------------------------------------------------------------------------
_20:@   JSR $nnnn
@---------------------------------------------------------------------------------
	ldrb r2,[m6502pc],#1
	ldr_ r1,m6502LastBank
	sub r0,m6502pc,r1
	ldrb r1,[m6502pc]
	orr m6502pc,r2,r1,lsl#8
	push16
	encodePC
	fetch 6
@---------------------------------------------------------------------------------
_21:@   AND ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opAND
	fetch 6
@---------------------------------------------------------------------------------
_24:@   BIT $nn
@---------------------------------------------------------------------------------
	doZ
	opBIT
	fetch 3
@---------------------------------------------------------------------------------
_25:@   AND $nn
@---------------------------------------------------------------------------------
	doZ
	opAND
	fetch 3
@---------------------------------------------------------------------------------
_26:@   ROL $nn
@---------------------------------------------------------------------------------
	doZ
	opROL
	fetch 5
@---------------------------------------------------------------------------------
_28:@   PLP
@---------------------------------------------------------------------------------
	pop8 r0
	decodeP
	fetch 4
@---------------------------------------------------------------------------------
_29:@   AND #$nn
@---------------------------------------------------------------------------------
	doIMM
	opAND
	fetch 2
@---------------------------------------------------------------------------------
_2A:@   ROL
@---------------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		@get C
	orrcs m6502_a,m6502_a,#0x00800000
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		@NZ
	adc cycles,cycles,cycles		@Set C
	fetch 2
@---------------------------------------------------------------------------------
_2C:@   BIT $nnnn
@---------------------------------------------------------------------------------
	doABS
	opBIT
	fetch 4
@---------------------------------------------------------------------------------
_2D:@   AND $nnnn
@---------------------------------------------------------------------------------
	doABS
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_2E:@   ROL $nnnn
@---------------------------------------------------------------------------------
	doABS
	opROL
	fetch 6
@---------------------------------------------------------------------------------
_30:@   BMI *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502pc],#1
	addne m6502pc,m6502pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_31:@   AND ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opAND
	fetch 5
@---------------------------------------------------------------------------------
_35:@   AND $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_36:@   ROL $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opROL
	fetch 6
@---------------------------------------------------------------------------------
_38:@   SEC
@---------------------------------------------------------------------------------
	orr cycles,cycles,#CYC_C
	fetch 2
@---------------------------------------------------------------------------------
_39:@   AND $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_3D:@   AND $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opAND
	fetch 4
@---------------------------------------------------------------------------------
_3E:@   ROL $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opROL
	fetch 7
@---------------------------------------------------------------------------------
_40:@   RTI
@---------------------------------------------------------------------------------
	pop8 r0		@pop 6502 flags and decode
	decodeP
	pop16		@pop the return address
	encodePC
@	sub cycles,cycles,#6*3*CYCLE	@not implemented yet in PocketNES.
@	b checkirqdisable				@Fixes ???
	fetch 6
@---------------------------------------------------------------------------------
_41:@   EOR ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opEOR
	fetch 6
@---------------------------------------------------------------------------------
_45:@   EOR $nn
@---------------------------------------------------------------------------------
	doZ
	opEOR
	fetch 3
@---------------------------------------------------------------------------------
_46:@   LSR $nn
@---------------------------------------------------------------------------------
	doZ
	opLSR
	fetch 5
@---------------------------------------------------------------------------------
_48:@   PHA
@---------------------------------------------------------------------------------
	mov r0,m6502_a,lsr#24
	push8 r0
	fetch 3
@---------------------------------------------------------------------------------
_49:@   EOR #$nn
@---------------------------------------------------------------------------------
	doIMM
	opEOR
	fetch 2
@---------------------------------------------------------------------------------
_4A:@   LSR
@---------------------------------------------------------------------------------
	movs m6502_nz,m6502_a,lsr#25	@Z, N=0
	mov m6502_a,m6502_nz,lsl#24		@result without garbage
	orr cycles,cycles,#CYC_C		@Prepare C
	fetch_c 2
@---------------------------------------------------------------------------------
_4C:@   JMP $nnnn
@---------------------------------------------------------------------------------
	ldrb r0,[m6502pc],#1
	ldrb r1,[m6502pc]
	orr m6502pc,r0,r1,lsl#8
	encodePC
	fetch 3
@---------------------------------------------------------------------------------
_4D:@   EOR $nnnn
@---------------------------------------------------------------------------------
	doABS
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_4E:@   LSR $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLSR
	fetch 6
@---------------------------------------------------------------------------------
_50:@   BVC *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_V
	ldrsb r0,[m6502pc],#1
	addeq m6502pc,m6502pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_51:@   EOR ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opEOR
	fetch 5
@---------------------------------------------------------------------------------
_55:@   EOR $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_56:@   LSR $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opLSR
	fetch 6
@---------------------------------------------------------------------------------
_58:@   CLI
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I
@	sub cycles,cycles,#2*3*CYCLE	@not implemented yet on PocketNES
@	b checkirqs						@Fixes ???
	fetch 2
@---------------------------------------------------------------------------------
_59:@   EOR $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_5D:@   EOR $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opEOR
	fetch 4
@---------------------------------------------------------------------------------
_5E:@   LSR $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opLSR
	fetch 7
@---------------------------------------------------------------------------------
_60:@   RTS
@---------------------------------------------------------------------------------
	pop16
	add m6502pc,m6502pc,#1
	encodePC
	fetch 6
@---------------------------------------------------------------------------------
_61:@   ADC ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opADC
	fetch_c 6
@---------------------------------------------------------------------------------
_65:@   ADC $nn
@---------------------------------------------------------------------------------
	doZ
	opADC
	fetch_c 3
@---------------------------------------------------------------------------------
_66:@   ROR $nn
@---------------------------------------------------------------------------------
	doZ
	opROR
	fetch 5
@---------------------------------------------------------------------------------
_68:@   PLA
@---------------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_a,m6502_nz,lsl#24
	fetch 4
@---------------------------------------------------------------------------------
_69:@   ADC #$nn
@---------------------------------------------------------------------------------
	doIMM
	opADC
	fetch_c 2
@---------------------------------------------------------------------------------
_6A:@   ROR
@---------------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		@get C
	mov m6502_a,m6502_a,rrx
	movs m6502_nz,m6502_a,asr#24	@NZ
	and m6502_a,m6502_a,#0xff000000
	adc cycles,cycles,cycles		@Set C
	fetch 2
@---------------------------------------------------------------------------------
_6C:@   JMP ($nnnn)
@---------------------------------------------------------------------------------
	doABS
	adr_ r1,m6502MemTbl
	and r2,addy,#0xE000
	ldr r1,[r1,r2,lsr#11]
	ldrb m6502pc,[r1,addy]!
	ldrb r0,[r1,#1]
	orr m6502pc,m6502pc,r0,lsl#8
	encodePC
	fetch 5
@---------------------------------------------------------------------------------
_6D:@   ADC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_6E:@   ROR $nnnn
@---------------------------------------------------------------------------------
	doABS
	opROR
	fetch 6
@---------------------------------------------------------------------------------
_70:@   BVS *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_V
	ldrsb r0,[m6502pc],#1
	addne m6502pc,m6502pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_71:@   ADC ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opADC
	@fetch_c 5
	fetch_c 4
@---------------------------------------------------------------------------------
_75:@   ADC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_76:@   ROR $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opROR
	fetch 6
@---------------------------------------------------------------------------------
_78:@   SEI
@---------------------------------------------------------------------------------
	orr cycles,cycles,#CYC_I
	fetch 2
@---------------------------------------------------------------------------------
_79:@   ADC $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_7D:@   ADC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opADC
	fetch_c 4
@---------------------------------------------------------------------------------
_7E:@   ROR $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opROR
	fetch 7
@---------------------------------------------------------------------------------
_81:@   STA ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opSTORE m6502_a
	fetch 6
@---------------------------------------------------------------------------------
_84:@   STY $nn
@---------------------------------------------------------------------------------
	doZ
	opSTORE m6502_y
	fetch 3
@---------------------------------------------------------------------------------
_85:@   STA $nn
@---------------------------------------------------------------------------------
	doZ
	opSTORE m6502_a
	fetch 3
@---------------------------------------------------------------------------------
_86:@   STX $nn
@---------------------------------------------------------------------------------
	doZ
	opSTORE m6502_x
	fetch 3
@---------------------------------------------------------------------------------
_88:@   DEY
@---------------------------------------------------------------------------------
	sub m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_8A:@   TXA
@---------------------------------------------------------------------------------
	mov m6502_a,m6502_x
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_8C:@   STY $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSTORE m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_8D:@   STA $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSTORE m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_8E:@   STX $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSTORE m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_90:@   BCC *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_C			@Test Carry
	ldrsb r0,[m6502pc],#1
	addeq m6502pc,m6502pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_91:@   STA ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opSTORE m6502_a
	fetch 6
@---------------------------------------------------------------------------------
_94:@   STY $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_95:@   STA $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_96:@   STX $nn,Y
@---------------------------------------------------------------------------------
	doZIYf
	opSTORE m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_98:@   TYA
@---------------------------------------------------------------------------------
	mov m6502_a,m6502_y
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_99:@   STA $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opSTORE m6502_a
	fetch 5
@---------------------------------------------------------------------------------
_9A:@   TXS
@---------------------------------------------------------------------------------
	mov r0,m6502_x,lsr#24
	strb_ r0,m6502_s
	fetch 2
@---------------------------------------------------------------------------------
_9D:@   STA $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opSTORE m6502_a
	fetch 5
@---------------------------------------------------------------------------------
_A0:@   LDY #$nn
@---------------------------------------------------------------------------------
	doIMM
	opLOAD m6502_y
	fetch 2
@---------------------------------------------------------------------------------
_A1:@   LDA ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opLOAD m6502_a
	fetch 6
@---------------------------------------------------------------------------------
_A2:@   LDX #$nn
@---------------------------------------------------------------------------------
	doIMM
	opLOAD m6502_x
	fetch 2
@---------------------------------------------------------------------------------
_A4:@   LDY $nn
@---------------------------------------------------------------------------------
	doZ
	opLOAD m6502_y
	fetch 3
@---------------------------------------------------------------------------------
_A5:@   LDA $nn
@---------------------------------------------------------------------------------
	doZ
	opLOAD m6502_a
	fetch 3
@---------------------------------------------------------------------------------
_A6:@   LDX $nn
@---------------------------------------------------------------------------------
	doZ
	opLOAD m6502_x
	fetch 3
@---------------------------------------------------------------------------------
_A8:@   TAY
@---------------------------------------------------------------------------------
	mov m6502_y,m6502_a
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_A9:@   LDA #$nn
@---------------------------------------------------------------------------------
	doIMM
	opLOAD m6502_a
	fetch 2
@---------------------------------------------------------------------------------
_AA:@   TAX
@---------------------------------------------------------------------------------
	mov m6502_x,m6502_a
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_AC:@   LDY $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLOAD m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_AD:@   LDA $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_AE:@   LDX $nnnn
@---------------------------------------------------------------------------------
	doABS
	opLOAD m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_B0:@   BCS *
@---------------------------------------------------------------------------------
	tst cycles,#CYC_C			@Test Carry
	ldrsb r0,[m6502pc],#1
	addne m6502pc,m6502pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_B1:@   LDA ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opLOAD m6502_a
	fetch 5
@---------------------------------------------------------------------------------
_B4:@   LDY $nn,X
@---------------------------------------------------------------------------------
	doZIX
	opLOAD m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_B5:@   LDA $nn,X
@---------------------------------------------------------------------------------
	doZIX
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_B6:@   LDX $nn,Y
@---------------------------------------------------------------------------------
	doZIY
	opLOAD m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_B8:@   CLV
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_V
	fetch 2
@---------------------------------------------------------------------------------
_B9:@   LDA $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_BA:@   TSX
@---------------------------------------------------------------------------------
	ldrb_ m6502_x,m6502_s
	mov m6502_x,m6502_x,lsl#24
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_BC:@   LDY $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opLOAD m6502_y
	fetch 4
@---------------------------------------------------------------------------------
_BD:@   LDA $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opLOAD m6502_a
	fetch 4
@---------------------------------------------------------------------------------
_BE:@   LDX $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opLOAD m6502_x
	fetch 4
@---------------------------------------------------------------------------------
_C0:@   CPY #$nn
@---------------------------------------------------------------------------------
	doIMM
	opCOMP m6502_y
	fetch_c 2
@---------------------------------------------------------------------------------
_C1:@   CMP ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opCOMP m6502_a
	fetch_c 6
@---------------------------------------------------------------------------------
_C4:@   CPY $nn
@---------------------------------------------------------------------------------
	doZ
	opCOMP m6502_y
	fetch_c 3
@---------------------------------------------------------------------------------
_C5:@   CMP $nn
@---------------------------------------------------------------------------------
	doZ
	opCOMP m6502_a
	fetch_c 3
@---------------------------------------------------------------------------------
_C6:@   DEC $nn
@---------------------------------------------------------------------------------
	doZ
	opDEC
	fetch 5
@---------------------------------------------------------------------------------
_C8:@   INY
@---------------------------------------------------------------------------------
	add m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_C9:@   CMP #$nn
@---------------------------------------------------------------------------------
	doIMM
	opCOMP m6502_a
	fetch_c 2
@---------------------------------------------------------------------------------
_CA:@   DEX
@---------------------------------------------------------------------------------
	sub m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_CC:@   CPY $nnnn
@---------------------------------------------------------------------------------
	doABS
	opCOMP m6502_y
	fetch_c 4
@---------------------------------------------------------------------------------
_CD:@   CMP $nnnn
@---------------------------------------------------------------------------------
	doABS
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_CE:@   DEC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opDEC
	fetch 6
@---------------------------------------------------------------------------------
_D0:@   BNE *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0xff
	ldrsb r0,[m6502pc],#1
	addne m6502pc,m6502pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_D1:@   CMP ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opCOMP m6502_a
	fetch_c 5
@---------------------------------------------------------------------------------
_D5:@   CMP $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_D6:@   DEC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opDEC
	fetch 6
@---------------------------------------------------------------------------------
_D8:@   CLD
@---------------------------------------------------------------------------------
	bic cycles,cycles,#CYC_D
	fetch 2
@---------------------------------------------------------------------------------
_D9:@   CMP $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_DD:@   CMP $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opCOMP m6502_a
	fetch_c 4
@---------------------------------------------------------------------------------
_DE:@   DEC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opDEC
	fetch 7
@---------------------------------------------------------------------------------
_E0:@   CPX #$nn
@---------------------------------------------------------------------------------
	doIMM
	opCOMP m6502_x
	fetch_c 2
@---------------------------------------------------------------------------------
_E1:@   SBC ($nn,X)
@---------------------------------------------------------------------------------
	doIIX
	opSBC
	fetch_c 6
@---------------------------------------------------------------------------------
_E4:@   CPX $nn
@---------------------------------------------------------------------------------
	doZ
	opCOMP m6502_x
	fetch_c 3
@---------------------------------------------------------------------------------
_E5:@   SBC $nn
@---------------------------------------------------------------------------------
	doZ
	opSBC
	fetch_c 3
@---------------------------------------------------------------------------------
_E6:@   INC $nn
@---------------------------------------------------------------------------------
	doZ
	opINC
	fetch 5
@---------------------------------------------------------------------------------
_E8:@   INX
@---------------------------------------------------------------------------------
	add m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
@---------------------------------------------------------------------------------
_E9:@   SBC #$nn
@---------------------------------------------------------------------------------
	doIMM
	opSBC
	fetch_c 2
@---------------------------------------------------------------------------------
_EA:@   NOP
@---------------------------------------------------------------------------------
	fetch 2
@---------------------------------------------------------------------------------
_EC:@   CPX $nnnn
@---------------------------------------------------------------------------------
	doABS
	opCOMP m6502_x
	fetch_c 4
@---------------------------------------------------------------------------------
_ED:@   SBC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_EE:@   INC $nnnn
@---------------------------------------------------------------------------------
	doABS
	opINC
	fetch 6
@---------------------------------------------------------------------------------
_F0:@   BEQ *
@---------------------------------------------------------------------------------
	tst m6502_nz,#0xff
	ldrsb r0,[m6502pc],#1
	addeq m6502pc,m6502pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
@---------------------------------------------------------------------------------
_F1:@   SBC ($nn),Y
@---------------------------------------------------------------------------------
	doIIY
	opSBC
	fetch_c 5
@---------------------------------------------------------------------------------
_F5:@   SBC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_F6:@   INC $nn,X
@---------------------------------------------------------------------------------
	doZIXf
	opINC
	fetch 6
@---------------------------------------------------------------------------------
_F8:@   SED
@---------------------------------------------------------------------------------
	orr cycles,cycles,#CYC_D
	fetch 2
@---------------------------------------------------------------------------------
_F9:@   SBC $nnnn,Y
@---------------------------------------------------------------------------------
	doAIY
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_FD:@   SBC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opSBC
	fetch_c 4
@---------------------------------------------------------------------------------
_FE:@   INC $nnnn,X
@---------------------------------------------------------------------------------
	doAIX
	opINC
	fetch 7
@---------------------------------------------------------------------------------
.section .text, "ax"
@---------------------------------------------------------------------------------
@cycles ran out
@---------------------------------------------------------------------------------
line0:
	mov r0,#0
	strb_ r0,ppuStat			@vbl clear, sprite0 clear
	str_ r0,scanline			@reset scanline count

	bl newframe					@display update
	
	mov r0,#0
	bl ppusync

	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0
	adr r0,line1_to_119
	str_ r0,nexttimeout
	adr lr,hk0
	ldr_ pc,scanlineHook
@---------------------------------------------------------------------------------
line1_to_119:
	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0

	ldr_ r0,scanline
	add r0,r0,#1
	str_ r0,scanline
	cmp r0,#119
	beq line119
	
	bl ppusync
	adr lr,hk0
	ldr_ pc,scanlineHook
@---------------------------------------------------------------------------------
line119:
	bl ppusync
	
	ldrb_ r0,ppuCtrl0
	strb_ r0,ppuCtrl0Frame		@Contra likes this

	adr addy,line120_to_240
	str_ addy,nexttimeout
	adr lr,hk0
	ldr_ pc,scanlineHook
@---------------------------------------------------------------------------------
line120_to_240:
	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0

	ldr_ r0,scanline
	add r0,r0,#1
	str_ r0,scanline

	cmp r0,#240
	adreq addy,line241
	streq_ addy,nexttimeout
	blne ppusync

	adr lr,hk0
	ldr_ pc,scanlineHook
@---------------------------------------------------------------------------------
line241:
NMIDELAY = CYCLE*21


	add cycles,cycles,#NMIDELAY	@NMI is delayed a few cycles..

@	ldrb r1,ppuStat
@	orr r1,r1,#0x90		@vbl & vram write
	mov r1,#0x80		@vbl flag
	strb_ r1,ppuStat

	adr addy,line241NMI
	str_ addy,nexttimeout
	b default_scanlinehook
@---------------------------------------------------------------------------------
line241NMI:
	ldr_ r0,frame
	add r0,r0,#1
	str_ r0,frame

	ldrb_ r0,ppuCtrl0
	tst r0,#0x80
	beq 0f			@NMI?

	ldr r12,=NMI_VECTOR
	bl Vec6502
	sub cycles,cycles,#3*7*CYCLE
0:
	sub cycles,cycles,#NMIDELAY

	@--- end of EMU_Run
	adr_ r2,cpuregs
	stmia r2,{m6502_nz-m6502pc}	@save 6502 state

	bl refreshNESjoypads

	bl updatesound

	adr lr, 2f
	ldr_ pc, endFrameHook
2:
	ldmfd sp!,{m6502_nz-m6502pc,globalptr,m6502zpage,pc}

@---------------------------------------------------------------------------------
NSF_Run:
@---------------------------------------------------------------------------------
	adr r1,nsf_out
	str_ r1,nexttimeout

	ldr_ r0, nsfplay
	ands r0, r0, r0
	beq noplay

	ldr_ r0, nsfinit
	ands r0, r0, r0
	beq noinit

	mov r0, #0
	mov r1, m6502zpage
	ldr r2, =0x2000/4
	bl filler

	ldr_ r1, nsfextrachipselect
	tst r1, #4
	bne 0f

	ldr r1, =wram
	ldr r2, =0x2000/4
	bl filler
0:
	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0, lsl#14

	ldr addy, =0x4015
	mov r0, #0xf
	bl soundwrite
		ldr addy, =0x4017
		mov r0, #0xc0
		bl soundwrite
		ldr addy, =0x4080
		mov r0, #0x80
		bl soundwrite
		ldr addy, =0x408a
		mov r0, #0xe8
		bl soundwrite

	ldr m6502pc, =0x4710
	encodePC
	ldr_ m6502_a, nsfsongno
	orr m6502_a, m6502_a, m6502_a, lsl#24
	ldr_ m6502_x, nsfsongmode
	mov m6502_y, #0
	ldr r0,=NES_RAM+0x100
	str_ r0, m6502_s
	orr cycles,#CYC_I
	
	mov r0, #0
	str_ r0, nsfinit
	adr lr,hk0
	ldr_ pc,scanlineHook

noinit:
	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0, lsl#8

	ldr_ r1,m6502LastBank
	sub m6502pc,m6502pc,r1
	cmp m6502pc, #0x4700
	adrne lr,hk0
	ldrne_ pc,scanlineHook

	ldr m6502pc, =0x4720
	encodePC
	ldr r0,=NES_RAM+0x100
	str_ r0, m6502_s
	mov m6502_a, #0
	adr lr,hk0
	ldr_ pc,scanlineHook

noplay:
	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0, lsl#8

	ldr m6502pc, =0x4700
	encodePC
	ldr r0,=NES_RAM+0x100
	str_ r0, m6502_s
	adr lr,hk0
	ldr_ pc,scanlineHook

nsf_out:
	adr_ r2,cpuregs
	stmia r2,{m6502_nz-m6502pc}	@save 6502 state
	bl updatesound
	ldmfd sp!,{m6502_nz-m6502pc,globalptr,m6502zpage,pc}
@---------------------------------------------------------------------------------
EMU_Run:
@---------------------------------------------------------------------------------
	stmfd sp!,{m6502_nz-m6502pc,globalptr,m6502zpage,lr}

	ldr globalptr,=globals
	ldr m6502zpage,=NES_RAM

	adr_ r0,cpuregs
	ldmia r0,{m6502_nz-m6502pc}	@restore 6502 state


	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0
	
	mov r0,#241
	str_ r0,scanline
	
	adr r1,line242_to_end
	str_ r1,nexttimeout

	ldr_ r1,emuFlags
	tst r1, #NSFFILE
	bne NSF_Run

	adr lr,hk0
	ldr_ pc,scanlineHook
@---------------------------------------------------------------------------------
line242_to_end:
	ldr_ r0,cyclesPerScanline
	add cycles,cycles,r0

	ldr_ r1,scanline
	ldr_ r2,lastScanline
	add r1,r1,#1
	str_ r1,scanline
	cmp r1,r2
	adr lr,hk0
	ldrne_ pc,scanlineHook

	adr addy,line0
	str_ addy,nexttimeout
	ldr_ pc,scanlineHook
@---------------------------------------------------------------------------------
pcm_scanlinehook:
@---------------------------------------------------------------------------------
	@ldr addy,=pcmctrl
	@ldr r2,[addy]
	@tst r2,#0x1000			@Is PCM on?
	@beq hk0
		b hk0

	ldr_ r0,pcmirqcount
@	ldr r1,cyclesPerScanline
@	subs r0,r0,r1,lsr#4
	subs r0,r0,#121			@Fire Hawk=122
	str_ r0,pcmirqcount
	bpl hk0

	tst r2,#0x40			@Is PCM loop on?
	ldrne_ r0,pcmirqbakup
	strne_ r0,pcmirqcount
	bne hk0
	tst r2,#0x80			@Is PCM IRQ on?
	orrne r2,r2,#0x8000		@set pcm IRQ bit in R4015
	bic r2,r2,#0x1000		@clear channel 5
	str r2,[addy]
	bne CheckI
@---------------------------------------------------------------------------------
hk0:
default_scanlinehook:
@---------------------------------------------------------------------------------
	fetch 0
@---------------------------------------------------------------------------------
rp2A03SetIRQPin:
	cmp r0,#0
	bxeq lr
@---------------------------------------------------------------------------------
CheckI:								@Check Interrupt Disable
@---------------------------------------------------------------------------------
	tst cycles,#CYC_I
	bne default_scanlinehook		@we dont want no stinkin irqs
@---------------------------------------------------------------------------------
irq6502:
@---------------------------------------------------------------------------------
	ldr r12,=IRQ_VECTOR
	bl Vec6502
	fetch 7
@---------------------------------------------------------------------------------
Vec6502:
@---------------------------------------------------------------------------------
	ldr_ r0,m6502LastBank
	sub r0,m6502pc,r0
	push16					@save PC

	encodeP (R)				@save P
VecCont:
	push8 r0

	orr cycles,cycles,#CYC_I	@disable IRQ
@	bic cycles,cycles,#CYC_D	@and decimal mode

	ldr_ r0,m6502MemTbl+7*4
	ldrb m6502pc,[r0,r12]!
	ldrb r2,[r0,#1]
	orr m6502pc,m6502pc,r2,lsl#8
	encodePC				@get IRQ vector

	bx lr
@---------------------------------------------------------------------------------
fiveminutes:	.word 5*60*60
sleeptime: 		.word 5*60*60
dontstop: 		.word 0
@---------------------------------------------------------------------------------
CPU_reset:	@called by loadcart (r0-r9 are free to use)
@---------------------------------------------------------------------------------
	str lr,[sp,#-4]!

@---cpu reset
	mov m6502_a,#0
	mov m6502_x,#0
	mov m6502_y,#0
	mov m6502_nz,#0
	adr_ m6502_rmem,m6502ReadTbl
	ldr r0,=NES_RAM+0x100
	str_ r0,m6502_s		@S=0xFD (0x100-3)
	mov cycles,#0		@D=0, C=0, V=0, I=1 disable IRQ.

	@(clear irq/nmi/res source)...

	ldr r12,=RES_VECTOR
	bl Vec6502

	adr_ r0,cpuregs
	stmia r0,{m6502_nz-m6502pc}
	ldr pc,[sp],#4
@---------------------------------------------------------------------------------
debugwrite:
	stmfd sp!, {r0-r3, lr}
	mov r1, addy
	bl debugwrite_c
	ldmfd sp!, {r0-r3, pc}

@---------------------------------------------------------------------------------
debugstep:
	stmfd sp!, {r0-r3, lr}
	adr_ r2,cpuregs
	stmia r2,{m6502_nz-m6502pc}		@refresh 6502 state
	bl stepdebug

	ldmfd sp!, {r0-r3, pc}

@---------------------------------------------------------------------------------
.section .dtcm, "aw"
@---------------------------------------------------------------------------------
globals:
op_table:
	.word _00,_01,_xx,_xx,_xx,_05,_06,_xx,_08,_09,_0A,_xx,_xx,_0D,_0E,_xx
	.word _10,_11,_xx,_xx,_xx,_15,_16,_xx,_18,_19,_xx,_xx,_xx,_1D,_1E,_xx
	.word _20,_21,_xx,_xx,_24,_25,_26,_xx,_28,_29,_2A,_xx,_2C,_2D,_2E,_xx
	.word _30,_31,_xx,_xx,_xx,_35,_36,_xx,_38,_39,_xx,_xx,_xx,_3D,_3E,_xx
	.word _40,_41,_xx,_xx,_xx,_45,_46,_xx,_48,_49,_4A,_xx,_4C,_4D,_4E,_xx
	.word _50,_51,_xx,_xx,_xx,_55,_56,_xx,_58,_59,_xx,_xx,_xx,_5D,_5E,_xx
	.word _60,_61,_xx,_xx,_xx,_65,_66,_xx,_68,_69,_6A,_xx,_6C,_6D,_6E,_xx
	.word _70,_71,_xx,_xx,_xx,_75,_76,_xx,_78,_79,_xx,_xx,_xx,_7D,_7E,_xx
	.word _xx,_81,_xx,_xx,_84,_85,_86,_xx,_88,_xx,_8A,_xx,_8C,_8D,_8E,_xx
	.word _90,_91,_xx,_xx,_94,_95,_96,_xx,_98,_99,_9A,_xx,_xx,_9D,_xx,_xx
	.word _A0,_A1,_A2,_xx,_A4,_A5,_A6,_xx,_A8,_A9,_AA,_xx,_AC,_AD,_AE,_xx
	.word _B0,_B1,_xx,_xx,_B4,_B5,_B6,_xx,_B8,_B9,_BA,_xx,_BC,_BD,_BE,_xx
	.word _C0,_C1,_xx,_xx,_C4,_C5,_C6,_xx,_C8,_C9,_CA,_xx,_CC,_CD,_CE,_xx
	.word _D0,_D1,_xx,_xx,_xx,_D5,_D6,_xx,_D8,_D9,_xx,_xx,_xx,_DD,_DE,_xx
	.word _E0,_E1,_xx,_xx,_E4,_E5,_E6,_xx,_E8,_E9,_EA,_xx,_EC,_ED,_EE,_xx
	.word _F0,_F1,_xx,_xx,_xx,_F5,_F6,_xx,_F8,_F9,_xx,_xx,_xx,_FD,_FE,_xx
  @m6502ReadTbl
	.word ram_R	@$0000
	.word PPU_R	@$2000
	.word IO_R	@$4000
	.word mem_R60	@$6000
	.word rom_R80	@$8000
	.word rom_RA0	@$A000
	.word rom_RC0	@$C000
	.word rom_RE0	@$E000
  @m6502WriteTbl
	.word ram_W	@$0000
	.word PPU_W	@$2000
	.word IO_W	@$4000
	.word sram_W	@$6000
	.word mem_W80	@$8000
	.word mem_WA0	@$A000
	.word mem_WC0	@$C000
	.word mem_WE0	@$E000
   @m6502MemTbl
__memmap_tbl:
	.word NES_RAM		@$0000   0000-7fff
	.word NES_XRAM-0x2000	@$2000    should
	.word NES_XRAM-0x4000	@$4000     never
	.word NES_SRAM-0x6000	@$6000      change
rommap:	.skip 4*4			@$8000-FFFF

cpustate:
	@group these together for save/loadstate	
	@.skip 7*4 @cpuregs (nz,c,a,x,y,cycles,pc)
__nz:
	.skip 2*4
__a:
	.skip 4
__x:
	.skip 4
__y:
	.skip 4
__p:
	.skip 4
__pc:
	.skip 4
__sp:
	.word 0 @m6502_s:
__lastbank:
	.word 0 @m6502LastBank: last memmap added to PC (used to calculate current PC)

	.word 0 @nexttimeout:  jump here when cycles runs out
__scanline:
	.word 0 @scanline
	.word 0 @scanlineHook
frametotal:		@let ui.c see frame count for savestates
	.word 0 @frame
	.word 0 @cyclesPerScanline (341*CYCLE or 320*CYCLE)
	.word 0 @lastScanline (261 or 311)

	.word 0 @(unused, for alignment)
	
@--- ppu ---

FPSValue:
	.word 0
	.word 0 @adjustBlend
ppustate:
	.word 0 @vramAddr
	.word 0 @vramAddr2 (temp)
	.word 0 @scrollX
	.word 0 @scrollY
	.word 0 @scrollYTemp
	.word 0 @sprite0Y
	.word 0 @bg0Cnt (mirroring control)

	.byte 0 @readTemp
	.byte 0 @busLatch
	.byte 0 @sprite0X
	.byte 1 @vramAddrInc
	.byte 0 @ppuStat
	.byte 0 @toggle
	.byte 0 @ppuCtrl0
	.byte 0 @ppuCtrl0Frame	;state of $2000 at frame start
	.byte 0 @ppuCtrl1
	.byte 0 @ppuOamAdr
	.skip 2 @align
__nes_chr_map:
	.skip 16	@nesChrMap 	VROM map for 0000-1FFF (1k bank numbers)
	
	.word 0 @vromMask
	.word 0 @vromBase

@ppustate end
@**!! update load/savestate if you move things around in here

@--- cart ---

	.word void 	@newFrameHook.
	.word void 	@endFrameHook, for some special VRAM mirrorings.
__hblankhook:
	.word void	@hblankHook, for games that need to do something when h-blank occurs.
	.word void	@ppuChrLatch
mapperstate:
	.skip 96	@mapperData

romstart:
__rombase:
	.word 0 	@romBase
	
@add others
	.word 0 	@romMask
	.word 0 	@prgSize8k
__prgsize16k:
	.word 0 	@prgSize16k
	.word 0 	@prgSize32k
__emuflags:
	.word 0 	@emuFlags
	.word 0		@prgcrc

	.word 0		@lightY

softrdata:
	.word 0 	@loopy_t
	.word 0 	@loopy_x
	.word 0 	@loopy_y
	.word 0 	@loopy_v
	.word 0 	@loopy_shift
	.word 0 	@bglastline
__rendercount:
	.word 0 	@renderCount
		@tempData
	.word 0		@tileofs
	.word 0		@ntbladr
	.word 0		@attradr
	.word 0		@ntbl_x
	.word 0		@attrsft
	.word 0		@pNTBL
	.word 0		@pScn
	.word 0		@pBGw
	.word 0		@attr
	.word BGwrite_data	@BGwrite
	.word SPwrite_data	@SPwrite
	.word rev_data	@pBit2Rev
	.skip 4 * (20 - 12)

nsfHeader:
	.skip 128

__nsfPlay:
	.word 0
__nsfInit:
	.word 0
__nsfSongNo:
	.word 0
__nsfSongMode:
	.word 0

all_pix_start:
	.word 0
all_pix_end:
	.word 0

__af_state:
	.word 0		@af_state
__af_start:
	.word 0x101	@af_start 30 fps
__palSyncLine:
	.word 0
__cartflags:
	.byte 0 	@cartFlags
__barcode:
	.byte 0
__barcode_out:
	.byte 0
	.align
@---------------------------------------------------------------------------------
